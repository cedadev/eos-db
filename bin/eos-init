#!python3

from sys import exit, stdout
import traceback

# Import EOS server access library.
print(
"""It is no longer necessary to call eos-init as the portal will bootstrap itself upon
startup, but you might still find it useful to run this to check that the database setup
is OK and to diagnose problems.
""")

try:
    from eos_db import server
except ImportError:
    traceback.print_exc(file=stdout)
    exit( "Please ensure that you have run setup.py in the EOS DB package " +
          "prior to running this script.")

# Switch to Postgres access mode (test uses SQLite)

try:
    server.choose_engine("PostgreSQL")
except:
    traceback.print_exc(file=stdout)
    exit ("Init-EOS failed to switch to Postgres access mode. " +
          "Your installation is probably corrupt. " +
          "Please reinstall and try again.")

# Create database.

try:
    server.deploy_tables()
except:
    traceback.print_exc(file=stdout)
    exit ("Init-EOS failed to deploy tables to Postgres. " +
          "Please ensure that you have set up a Postgres instance with the " +
          "correct access permissions.")

# Create entries for permissible states in state machine.  Note that these are
# now in the config, so we don't need to list them here.

added = 0
try:
    added = server.setup_states(ignore_dupes=True)
    print("Added %i new valid states." % added)

except Exception as e:
    traceback.print_exc(file=stdout)
    exit( "Init-EOS failed to deploy data to Postgres. " +
          "Please ensure that you have set up a Postgres instance with the " +
          "correct access permissions.")

print ("EOS was successfully initialised.")
